1.已经稳定运行的应用程序CPU突然增高，如何排查？



2.如果网络传输耗时100ms, 业务处理时间50ms,一次http传输耗费时间多少？


3.redis迁移扩容需要注意什么
    查看redis集群状态指令：cluster nodes， 可以看到有几个master几个slave， 每一个master分配的哈希槽
    水平扩容：
        add node            增加master， 此时数据为空
        reshard             分配哈希槽
        add node            增加salve
        cluster replicate,  指定是谁的slave



4.redis突然内存升高的排查和解决方法
    (1) 如果是长期的内存水位高：
        考虑对内容进行分析，
            是否有合理的数据逐出机制、
            是否有设置TTL
            对过期数据的删除频率设置调整， 参数hz（默认每秒执行10次， 避免太大
            大Key拆分
            内存容量升级
    （2）如果突然飙升
        可能的原因是短时间大量写入新数据
            通过设置Key的过期时间自动清理不再需要的Key，或手动删除不再需要的Key。
            升级实例规格
            考虑集群部署、将数据分布到多个数据分片节点上，减轻单个数据分片节点的内存压力
        大量建立新连接：
            排查是否存在连接泄漏。
            设置连接超时时间，自动关闭空闲连接，timeout参数

        突发访问产生大量流量超过网络带宽，导致输入缓冲区和输出缓冲区积压、
            查看性能监控的出入口流量使用率是否达到100%。
            执行MEMORY STATS命令，查看clients.normal占用的内存是否过多。

            可以考虑增加实例带宽
        客户端处理速度跟不上Redis的处理速度，导致输出缓冲区积压。
                排查方法：
                在Redis中，执行MEMORY DOCTOR命令，查看big_client_buf的值。当big_client_buf=1时，代表至少有一个客户端的输出缓冲区占用内存较大。

                解决方案：
                执行CLIENT LIST命令，查看哪个客户端的输出缓冲区内存占用量（omem）较大。排查该客户端应用是否存在性能问题。
    redis内存占用包括：
        （1）数据：主要
        （2）链路：Input buff与Output buff与每个客户端的连接有关，通常较小。当执行客户端Range类操作或大Key收发较慢时，Input buff与Output buff占用的内存会增大，从而影响数据区，甚至会造成内存溢出OOM（Out Of Memory）
        （3）管理：

    使用MEMORY STATS命令查看内存占用情况
    使用MEMORY DOCTOR命令查看内存诊断建议
    使用MEMORY USAGE命令查看指定Key占用的内存


redis主从复制的注意事项：读写分离提高负载能力
    主从复制的过程：
        启动时从数据库发送psync命令，
        主数据库后台保存快照（rdb），并将期间的命令缓存
        主数据库将两者发送给从数据库
        从数据库载入快照文件并执行缓存命令

    （1)master开启了持久化：


5.Java异步回调的方式：
    简单来讲就是对象A在执行自己的方法a, 回去调用对象B的方法b ,这里可以选择异步调用， 但是又想知道执行的结果：
    这里有两种方式：要么多线程中的callback或者feature来主动查询执行结果，要么对象b中维护对象a的实例成员（或者接口），
    执行结束后直接调用对象a的回调方法， 后者即称为异步回调，


    在某些执行比较耗时或者处于今后扩展的角度考虑可以使用。


Java状态机以及一致性保证：工作流程、游戏等场景中需要
    （1）状态机模型的基本要素：状态、事件(状态转换的触发器，也可以来自外部）和转换（transition，转换过程中关联的条件和动作）
    （2）遵循的原则，最小的状态、明确的状态和转换， 并且是可以预测的
    （3）当前状态 + 接受的事件 + 新状态， 组成状态机的基本元素，也就是严格定义了状态推进的准则，可以避免状态的重复修改干扰



go Context的作用：
    （1）定义超时时间：withTimeout,如http请求
    （2）取消后续操作：withCancel, 如果中间操作已经执行失败了，不想执行后续操作就调用得到的cancel（）方法， 然后后续操作中判断ctx.done(通道）就不执行
    （3）上下文传值：withValue, 指不能修改，运用比较多


LRU的基本方法以及更新的效率
 map + 双向链表 可以增加查询和修改的效率
 get方法
 put方法



跳表插入

CAS实现


504错误如何诊断：
    网关超时

go map的注意实现


线程安全的链表是哪个， 自己如何实现

    （1）vector : 早期的， synchronized实现
    （2）ConcurrentLinkedDeque: 无锁的双端队列，
        head和tail都是transient volatile
        node中的pre\next\value 也都是volatile的
        基于CAS完成
    （3）ConcurrentLinkedQueue：无锁的单向队列，队首删除和查找，队尾部增加，其他遇上类似

    （4）CopyOnWriteArrayList: 线程安全的数组列表， 有锁
        存储结构：transient volatile Object[] array;
        基于synchronized
        增加或者修改的时候复制整个数组，修改后然后在更新到原volatile数组，适合读场景多修改较少的情形


transient 关键字
    不需要序列化的字段标识：响应信息仅仅存在于内存中而不谁传输到磁盘中
    当然对于实现了Externalizable接口的对象（需要自己实现writeExternal和readExternal)，自己可以指定需要序列化的字段， 这个关键字也就无效了
    静态属性不会被序列化，这个关键词也没有意义



数据库分表
    （1）什么时候需要：
        因为数据量大和SQL复杂导致IO（数据缓存不了）、CPU瓶颈（数据运算操作大），
        水平分库：
            以字段为依据，按照一定策略（hash、range等），将一个库中的数据拆分到多个库中。
            系统绝对并发量上来了，分表难以根本上解决问题，并且还没有明显的业务归属来垂直分库的情况下。
            IO和CPU压力都能下降
        水平分表：
            以字段为依据，按照一定策略（hash、range等），讲一个表中的数据拆分到多个表中。
            系统绝对并发量没有上来，只是单表的数据量太多，影响了SQL效率，加重了CPU负担，以至于成为瓶颈，可以考虑水平分表。
            单表执行SQL效率提高，降低CPU压力
        垂直分库：
            以表为依据，按照业务归属不同，将不同的表拆分到不同的库中。
            系统绝对并发量上来了，并且可以抽象出单独的业务模块的情况下
        垂直分表：
            以字段为依据，按照字段的活跃性，将表中字段拆到不同的表中（主表和扩展表）。
            系统绝对并发量并没有上来，表的记录并不多，但是字段多，并且热点数据和非热点数据在一起，单行数据所需的存储空间较大，以至于数据库缓存的数据行减少，查询时回去读磁盘数据产生大量随机读IO，产生IO瓶颈。
            垂直分表的拆分原则是将热点数据（可能经常会查询的数据）放在一起作为主表，非热点数据放在一起作为扩展表，这样更多的热点数据就能被缓存下来，进而减少了随机读IO。拆了之后，要想获取全部数据就需要关联两个表来取数据。
        分库分表带来的问题：
            事务问题：分布式事务
            表关联困难：避免使用join
    （2）如何分表




乐观锁的实际实现： 读不加锁、写加锁
    乐观锁是对于数据冲突保持一种乐观态度，操作数据时不会对操作的数据进行加锁（这使得多个任务可以并行的对数据进行操作），只有到数据提交的时候才通过一种机制来验证数据是否存在冲突
    在并发量很大的情况下，由于失败的请求增多，效率反而比悲观锁差
    版本号（时间戳）、CAS、更新条件判断



如何破坏双亲委派（业务代码）以及为什么需要？

    双亲委派的目的：保证类的唯一性， 尤其是一些JDK源码中重要的类防止篡改，
    jdk9以后的修改：扩展类加载器改成了平台类加载器， 三类加载器都继承自 jdk.internal.loader.BuiltinClassLoader， 以前是Java.lang.Classloader
        当平台及应用程序类加载器收到类加载请求，在委派给父加载器加载前，要先判断该类是否能够归属到某一个系统模块中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器完成加载
    自定义累加载器的作用：
        执行代码前自动验证数字签名。
        根据用户提供的密码解密代码，从而可以实现代码混淆器来避免反编译class文件。
        隔离不同模块的类（大型系统中多个模块的依赖中可能会有同名但是不同版本的类）
        根据用户需求来动态地加载类。
        根据应用需求把其他数据以字节码的形式加载到应用中。










